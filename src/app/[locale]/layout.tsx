import { I18nProviderClient } from "@/locale/client";
import { DEFAULT_LOCALE, LOCALES, Locales } from '@/locale/locale';
import { ThemeProvider } from "@/providers/theme-provider";
import "@/styles/globals.css";
import type { Metadata } from "next";
import localFont from "next/font/local";

// https://fonts.google.com/variablefonts (Better because includes more weights)
// https://fonts.google.com/specimen/Onest
// [DOC]: https://nextjs.org/docs/app/api-reference/components/font
// [DOC]: https://nextjs.org/docs/app/building-your-application/optimizing/fonts#local-fonts
const customLocalFont = localFont({
  src: "../../../public/fonts/Onest-Variable.ttf",
  display: "swap",
  fallback: [
    "ui-sans-serif",
    "system-ui",
    "sans-serif",
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol",
    "Noto Color Emoji",
  ],
  adjustFontFallback: "Times New Roman",
  variable: "--font-onest",
});

// https://next-international.vercel.app/docs/app-setup
// https://localise.biz/iso-on-fire (Site for translations)
// export function generateStaticParams() {
//   return getStaticParams();
// }
// import { setStaticParamsLocale } from 'next-international/server'

// export default function Page({ params: { locale } }: { params: { locale: string } }) {
//   setStaticParamsLocale(locale)

//   return (
//     ...
//   )
// }


export function getStaticProps(e: any) {
  console.log(`ðŸ§Š ~ e: `, e);

    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
  }
}

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
  params: { locale },
}: Readonly<{
  children: React.ReactNode;
  params: { locale: Locales };
}>) {
  console.log(`ðŸ§Š ~ locale: `, locale);
  const _locale = LOCALES.includes(locale) ? locale : DEFAULT_LOCALE;
  console.log(`ðŸ§Š ~ _locale: `, _locale);
  return (
    <html lang={locale} suppressHydrationWarning>
      <body
        className={`${customLocalFont.className} ${customLocalFont.variable}`}
      >
        <I18nProviderClient locale={_locale}>
          <ThemeProvider
            attribute="class"
            defaultTheme="system"
            enableSystem
            disableTransitionOnChange
          >
            {children}
          </ThemeProvider>
        </I18nProviderClient>
      </body>
    </html>
  );
}
